{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"PostMessagePreviewSnapshots.js","sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/node_modules/%40sanity/presentation/src/editor/PostMessagePreviewSnapshots.tsx"],"sourcesContent":["import type {PreviewSnapshot} from '@repo/visual-editing-helpers'\nimport type {ClientPerspective} from '@sanity/client'\nimport {memo, useEffect, useMemo, type FC} from 'react'\nimport {\n  combineLatest,\n  debounceTime,\n  filter,\n  map,\n  merge,\n  NEVER,\n  share,\n  skipWhile,\n  Subject,\n  switchMap,\n  takeUntil,\n} from 'rxjs'\nimport {getDraftId, getPublishedId} from 'sanity'\nimport {useDocumentPreviewStore, useSchema, type PreviewValue} from '../internals'\nimport type {VisualEditingConnection} from '../types'\n\ntype Ref = {\n  _id: string\n  _type: string\n}\n\nexport interface PostMessagePreviewsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n  refs: Ref[]\n}\n\nconst PostMessagePreviews: FC<PostMessagePreviewsProps> = (props) => {\n  const {comlink, refs, perspective} = props\n  const documentPreviewStore = useDocumentPreviewStore()\n  const schema = useSchema()\n\n  const refsSubject = useMemo(() => new Subject<Ref[]>(), [])\n\n  const previews$ = useMemo(() => {\n    return refsSubject.asObservable().pipe(\n      switchMap((refs) => {\n        return combineLatest(\n          refs.map((ref) => {\n            const draftRef = {...ref, _id: getDraftId(ref._id)}\n            const draft$ =\n              perspective === 'previewDrafts'\n                ? documentPreviewStore\n                    .observeForPreview(draftRef, schema.get(draftRef._type)!)\n                    .pipe(\n                      // Share to prevent double subscribe in the merge\n                      share(),\n                      // Don't emit if no snapshot is returned\n                      skipWhile((p) => p.snapshot === null),\n                    )\n                : // Don't emit if not displaying drafts\n                  NEVER\n\n            const publishedRef = {...ref, _id: getPublishedId(ref._id)}\n            const published$ = documentPreviewStore.observeForPreview(\n              publishedRef,\n              schema.get(publishedRef._type)!,\n            )\n\n            return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(\n              filter((p) => !!p.snapshot),\n              map((p) => {\n                const snapshot = p.snapshot as PreviewValue & {\n                  _id: string\n                }\n                return {\n                  _id: getPublishedId(snapshot._id),\n                  title: snapshot.title,\n                  subtitle: snapshot.subtitle,\n                  description: snapshot.description,\n                  imageUrl: snapshot.imageUrl,\n                } as PreviewSnapshot\n              }),\n            )\n          }),\n        )\n      }),\n      debounceTime(0),\n    )\n  }, [documentPreviewStore, refsSubject, schema, perspective])\n\n  useEffect(() => {\n    const sub = previews$.subscribe((snapshots) => {\n      comlink.post('presentation/preview-snapshots', {snapshots})\n    })\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [comlink, previews$])\n\n  useEffect(() => {\n    refsSubject.next(refs)\n  }, [refs, refsSubject])\n\n  return null\n}\n\nexport default memo(PostMessagePreviews)\n"],"names":["PostMessagePreviews","props","comlink","refs","perspective","documentPreviewStore","useDocumentPreviewStore","schema","useSchema","refsSubject","useMemo","Subject","previews$","asObservable","pipe","switchMap","combineLatest","map","ref","draftRef","_id","getDraftId","draft$","observeForPreview","get","_type","share","skipWhile","p","snapshot","NEVER","publishedRef","getPublishedId","published$","merge","takeUntil","filter","title","subtitle","description","imageUrl","debounceTime","useEffect","sub","subscribe","snapshots","post","unsubscribe","next","memo"],"mappings":";;;;;;;;;AA+BA,MAAMA,sBAAqDC,CAAU,UAAA;IAC7D,MAAA,EAACC,OAAAA,EAASC,IAAAA,EAAMC,WAAAA,EAAeH,GAAAA,OAC/BI,mLAAuBC,0BAAAA,CAAAA,IACvBC,oKAASC,aAAAA,KAETC,wNAAcC,UAAAA,EAAQ,IAAM,iJAAIC,UAAAA,CAAe,GAAG,CAAA,CAAE,GAEpDC,gBAAYF,gNAAAA,EAAQ,IACjBD,YAAYI,YAAAA,CAAAA,EAAeC,IAAAA,kJAChCC,YAAAA,EAAWZ,CAAAA,0JACFa,gBAAAA,EACLb,OAAKc,GAAAA,CAAKC,CAAQ,QAAA;gBAChB,MAAMC,WAAW;oBAAC,GAAGD,GAAAA;oBAAKE,iKAAKC,aAAAA,EAAWH,IAAIE,GAAG;gBAC3CE,GAAAA,SACJlB,gBAAgB,kBACZC,qBACGkB,iBAAAA,CAAkBJ,UAAUZ,OAAOiB,GAAAA,CAAIL,SAASM,KAAK,CAAE,EACvDX,IAAAA,CAAAA,iDAAAA;iKAECY,QAAAA,CAAM,IAAA,wCAAA;iKAENC,YAAAA,EAAWC,CAAAA,IAAMA,EAAEC,QAAAA,KAAa,IAAI,KACtC,sCAAA;6JAEFC,QAAAA,EAEAC,eAAe;oBAAC,GAAGb,GAAAA;oBAAKE,iKAAKY,iBAAAA,EAAed,IAAIE,GAAG;gBAAA,GACnDa,aAAa5B,qBAAqBkB,iBAAAA,CACtCQ,cACAxB,OAAOiB,GAAAA,CAAIO,aAAaN,KAAK,CAC/B;gBAEA,wJAAOS,QAAAA,EAAMD,WAAWnB,IAAAA,EAAKqB,4JAAAA,EAAUb,MAAM,CAAC,GAAGA,MAAM,EAAER,IAAAA,kJACvDsB,SAAAA,EAAQR,CAAAA,MAAM,CAAC,CAACA,IAAEC,QAAQ,GAC1BZ,uJAAAA,EAAKW,CAAM,QAAA;oBACT,MAAMC,WAAWD,IAAEC,QAAAA;oBAGZ,OAAA;wBACLT,MAAKY,4KAAAA,EAAeH,SAAST,GAAG;wBAChCiB,OAAOR,SAASQ,KAAAA;wBAChBC,UAAUT,SAASS,QAAAA;wBACnBC,aAAaV,SAASU,WAAAA;wBACtBC,UAAUX,SAASW,QAAAA;oBACrB;gBAAA,CACD,CACH;YAAA,CACD,CACH,CACD,oJACDC,eAAAA,EAAa,CAAC,CAChB,GACC;QAACpC;QAAsBI;QAAaF;QAAQH,WAAW;KAAC;IAE3DsC,iNAAAA,YAAAA,EAAU,MAAM;QACRC,MAAAA,MAAM/B,UAAUgC,SAAAA,CAAWC,CAAc,cAAA;YAC7C3C,QAAQ4C,IAAAA,CAAK,kCAAkC;gBAACD;YAAAA,CAAU;QAAA,CAC3D;QAED,OAAO,MAAM;YACXF,IAAII,WAAAA,CAAY;QAClB;IAAA,GACC;QAAC7C;QAASU,SAAS;KAAC,6MAEvB8B,YAAAA,EAAU,MAAM;QACdjC,YAAYuC,IAAAA,CAAK7C,IAAI;IACpB,GAAA;QAACA;QAAMM,WAAW;KAAC,GAEf;AACT;AAEA,IAAewC,wOAAAA,OAAAA,EAAKjD,mBAAmB","ignoreList":[0]}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
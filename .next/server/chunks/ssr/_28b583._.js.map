{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/sanity/lib/orders/getMyOrders.tsx"],"sourcesContent":["import { defineQuery } from \"next-sanity\";\r\nimport { sanityFetch } from \"../live\";\r\n\r\nexport async function getMyOrders(userId: string) {\r\n    if (!userId) {\r\n        throw new Error('User ID is required');\r\n    }\r\n\r\n    //define the query to get orders based on userId, sorted by order date descending\r\n    const MY_ORDERS_QUERY = defineQuery(`\r\n    *[_type == \"order\" && $userId] | order(orderDate desc) {\r\n        ...,\r\n        products[]{\r\n            ...,\r\n            product->\r\n        }\r\n    }\r\n    `);\r\n\r\ntry {\r\n    //use sanityfetch to send the query\r\n    const orders = await sanityFetch({\r\n        query: MY_ORDERS_QUERY,\r\n        params: { userId },\r\n    });\r\n\r\n    //return the list of orders, or an empty array if no orders found\r\n    return orders.data || [];\r\n} catch (error) {\r\n    console.error('Error fetching orders:', error);\r\n    throw new Error('error fetching orders');\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,eAAe,YAAY,MAAc;IAC5C,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IAEA,iFAAiF;IACjF,MAAM,kBAAkB,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD,EAAE,CAAC;;;;;;;;IAQrC,CAAC;IAEL,IAAI;QACA,mCAAmC;QACnC,MAAM,SAAS,MAAM,CAAA,GAAA,qHAAA,CAAA,cAAW,AAAD,EAAE;YAC7B,OAAO;YACP,QAAQ;gBAAE;YAAO;QACrB;QAEA,iEAAiE;QACjE,OAAO,OAAO,IAAI,IAAI,EAAE;IAC5B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,IAAI,MAAM;IAChB;AACJ"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Rey%20Omar%20Esguerra/Downloads/reyecommerce/app/%28store%29/orders/page.tsx"],"sourcesContent":["import { getMyOrders } from \"@/sanity/lib/orders/getMyOrders\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nasync function Orders() {\r\n\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n        return redirect('/');\r\n    }\r\n\r\n    const orders = await getMyOrders(userId);\r\n\r\n  return (<div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4\">\r\n            <div className=\"bg-white p-4 sm:p-8 rounded-xl shadow-lg w-full max-w-4xl\">\r\n                <h1 className=\"text-4xl font-bold text-gray-900 tracking-tight mb-8\">\r\n                    My Orders\r\n                </h1>\r\n\r\n                {orders.length === 0 ? (\r\n                    <div className=\"text-center text-gray-600\">\r\n                        <p>You have not placed any orders yet.</p>\r\n                    </div>    \r\n                ) : (\r\n                    <div className=\"p-4 sm:p-6 border-b border\">\r\n                        <h1>Order</h1>\r\n                    </div>\r\n                    )} \r\n                    {/* 4:22:46 */}\r\n            </div>    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Orders;"],"names":[],"mappings":";;;;AAAA;AAEA;AADA;AACA;;;;;AAEA,eAAe;IAEX,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACT,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACpB;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,cAAW,AAAD,EAAE;IAEnC,qBAAQ,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC;oBAAG,WAAU;8BAAuD;;;;;;gBAIpE,OAAO,MAAM,KAAK,kBACf,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC;kCAAE;;;;;;;;;;yCAGP,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC;kCAAG;;;;;;;;;;;;;;;;;;;;;;AAO5B;uCAEe"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}